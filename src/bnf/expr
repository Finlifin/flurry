block -> { statement* expr? }

list -> [ listof(expr) ]
map -> [ pair(id, expr) ]

qoute -> ( expr )
tuple_init -> ( (expr,)* )

bool_not -> not expr

match_expr ->
if_expr ->
when_expr ->
if_match_expr ->


lambda -> 
    \pattern -> expr
    | \listof(pattern) -> expr 


-- types
def -> definition


-- permitives
id
int
real
symbol
str
cstr
char_str
byte_array


-- binary
bool_or

bool_and

bool_eq
bool_not_eq
bool_gt
bool_lt
bool_gt_eq
bool_lt_eq

range
range_inclusive

add
minus

div
multi
mod

add_add

is_subtype 
is_supertype

select -> expr . (id | ref | ptr | dyn | mutref | mutptr | mutdyn)
lift -> expr ' id
pipe -> expr | expr
eff_elm -> expr # (expr | eff_match_branches)?
err_elm -> expr ! (expr | err_match_branches)?

-- postfix
construction peak next is { -> (expr | .) {listof((symbol_assign | implicit_assign)}
call peak next is ( -> expr (listof((expr | symbol_assign | implicit_assign)))
tcall peek next is < -> expr <listof((expr | symbol_assign | implicit_assign))>

index peak next is [ -> expr [ expr ..? | .. expr? ]

optional_unwrap -> expr .?
cast -> expr .as(expr)
ref -> expr .ref
mutref -> expr .mutref
dyn -> expr .dyn
mutdyn -> expr .mutdyn
ptr -> expr .ptr
mutptr -> expr .mutptr
deref -> expr .*


range -> expr .. expr
range_from -> expr ..
range_to -> .. expr
range_full -> ..
range_inclusive -> expr ..= expr
range_to_inclusive -> ..= expr